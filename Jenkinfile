pipeline {
    agent any

    environment {
        // Remote deployment info
        REMOTE_HOST = 'nutthawat@34.126.120.130'  // change to your actual user@ip
        SSH_CREDENTIALS = 'ssh-prod_instance'     // Jenkins SSH credentials ID

        REMOTE_APP_DIR = '/home/aungodzilla2548/Devtools-Proj-Repo/'          // This dir on the remote server must have docker-compose.yml and source code
    }

    stages {
        stage('Checkout Source') {
            steps {
                git branch: 'cilent-side-rendering', url: 'https://github.com/KKP240/Devtools-Proj-Repo.git'
                echo "Source code checked out successfully."
            }
        }

        stage('Unit Tests') {
            steps {
                echo "Running Django unit tests..."
                sh '''
                    python3 -m venv venv
                    ./venv/bin/pip install -r requirements.txt
                    cd pettech
                    ../venv/bin/python manage.py test
                '''
            }
            post {
                always {
                    sh 'rm -rf venv'
                }
            }
        }

        stage('Deploy: Build & Run All Services') {
            steps {
                echo "Deploying with docker compose..."
                sshagent([SSH_CREDENTIALS]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_HOST} '
                            set -e
                            echo "Changing to app directory..."
                            cd ${REMOTE_APP_DIR}

                            echo "Building all services..."
                            docker compose build

                            echo "Bringing up all containers..."
                            docker compose up -d

                            echo "Deployment completed."
                        '
                    """
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished."
        }
        success {
            echo "✅ Deployment succeeded."
        }
        failure {
            echo "❌ Deployment failed."
        }
    }
}